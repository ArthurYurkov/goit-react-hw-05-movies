{"version":3,"file":"static/js/934.fdef7146.chunk.js","mappings":"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","sources":["Fetch/api.js","webpack://goit-react-hw-05-movies/./src/pages/SearchBar/styles.module.css?d43b","pages/SearchBar/SearchBar.jsx","webpack://goit-react-hw-05-movies/./src/pages/Movies/styles.module.css?65fd","pages/Movies/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst URL_KEY = 'https://api.themoviedb.org/3';\nconst API_KEY = 'eebb0a433327e7b1272200d09c61d355';\n\nexport const fetchTrendingMovies = async () => {\n  const { data } = await axios.get(\n    `${URL_KEY}/trending/movie/day?api_key=${API_KEY}`\n  );\n\n  return data.results;\n};\n\nexport const fetchSearchMovies = async movie => {\n  const { data } = await axios.get(\n    `${URL_KEY}/search/movie?api_key=${API_KEY}&language=en-US&query=${movie}`\n  );\n  return data.results;\n};\n\nexport const fetchMoviesById = async movieId => {\n  const { data } = await axios.get(\n    `${URL_KEY}/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n\n  return data;\n};\n\nexport const fetchMovieCast = async movieId => {\n  const { data } = await axios.get(\n    `${URL_KEY}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n\n  return data.cast;\n};\n\nexport const fetchMovieReviews = async movieId => {\n  const { data } = await axios.get(\n    `${URL_KEY}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n\n  return data.results;\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"searchContainer\":\"styles_searchContainer__S6xjX\",\"inputStyle\":\"styles_inputStyle__vyvgQ\",\"searchBtn\":\"styles_searchBtn__eo1VN\",\"searchTitle\":\"styles_searchTitle__RKp7p\"};","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './styles.module.css';\n\nexport default function SearchBar({ onChangeQuery }) {\n  const [search, setSearch] = useState('');\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (search === null) {\n      return;\n    }\n    onChangeQuery(search);\n  };\n\n  const handleInputChange = e => {\n    setSearch(e.target.value.trim());\n  };\n\n  return (\n    <>\n      <form\n        autoComplete=\"off\"\n        className={styles.searchContainer}\n        onSubmit={handleSubmit}\n      >\n        <p className={styles.searchTitle}>Enter you're movie name</p>\n        <input\n          type=\"text\"\n          className={styles.inputStyle}\n          value={search}\n          onChange={handleInputChange}\n        />\n        <button className={styles.searchBtn} type=\"submit\">\n          Search\n        </button>\n      </form>\n    </>\n  );\n}\n\nSearchBar.propTypes = {\n  onChangeQuery: PropTypes.func,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"styles_container__pTNaU\",\"list\":\"styles_list__PzTUP\",\"movieItem\":\"styles_movieItem__3CylH\",\"movieTitle\":\"styles_movieTitle__vbMO0\"};","import { fetchSearchMovies } from 'Fetch/api';\nimport SearchBar from 'pages/SearchBar/SearchBar';\nimport { useEffect, useState } from 'react';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\nimport styles from './styles.module.css';\n\nexport default function Movies() {\n  const [movieList, setMovieList] = useState([]);\n\n  const [searchParams, setSearchParams] = useSearchParams('');\n\n  const currentQuery = searchParams.get('query') ?? '';\n  const location = useLocation();\n\n  const getSearchMovies = async currentQuery => {\n    try {\n      await fetchSearchMovies(currentQuery).then(res => setMovieList(res));\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    if (currentQuery === '') {\n      return;\n    }\n    getSearchMovies(currentQuery);\n  }, [currentQuery]);\n\n  const onQueryChange = newQuery => {\n    if (newQuery === currentQuery) {\n      return alert('This film already found');\n    }\n    if (newQuery === '') {\n      setMovieList([]);\n      return;\n    }\n    setSearchParams({ query: newQuery });\n  };\n\n  return (\n    <>\n      <SearchBar onChangeQuery={onQueryChange} />\n      <div className={styles.container}>\n        <div className={styles.list}>\n          {movieList.map(movie => {\n            return (\n              <Link\n                to={`/movies/${movie.id}`}\n                state={{ from: location }}\n                key={movie.id}\n                className={styles.movieItem}\n              >\n                <img\n                  src={`https://image.tmdb.org/t/p/w300${movie.poster_path} `}\n                  alt={movie.title}\n                />\n                <p className={styles.movieTitle}>\n                  {movie.title ? movie.title : ' No information'}\n                </p>\n              </Link>\n            );\n          })}\n        </div>\n      </div>\n    </>\n  );\n}\n"],"names":["URL_KEY","API_KEY","fetchTrendingMovies","axios","data","results","fetchSearchMovies","movie","fetchMoviesById","movieId","fetchMovieCast","cast","fetchMovieReviews","SearchBar","onChangeQuery","useState","search","setSearch","autoComplete","className","styles","onSubmit","e","preventDefault","type","value","onChange","target","trim","Movies","movieList","setMovieList","useSearchParams","searchParams","setSearchParams","currentQuery","get","location","useLocation","getSearchMovies","then","res","console","log","useEffect","newQuery","alert","query","map","to","id","state","from","src","poster_path","alt","title"],"sourceRoot":""}